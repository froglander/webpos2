#!/usr/bin/env node


// Express can launch a www executable to handle certain tasks.
// www goes in bin (sometimes .bin to keep it hidden)

// This way, we can set certain properties here
// rather than having them take up space in server.js.
var debug = require('debug')('express-example');

// we bring in the app we exported from server.js
var app = require('../server');

// we bring in the models we exported with index.js
var models = require("../models");

// we set the port of the app
app.set('port', process.env.PORT || 3000);


// we sync the models with our db
// (thus creating the apropos tables)
models.sequelize.sync().then(function () {
    // set our app to listen to the port we set above
    var server = app.listen(app.get('port'), function() {
        // then save a log of the listening to our debugger.
        debug('Express server listening on port ' + server.address().port);
    });
});


// #!/usr/bin/env node
//
// /**
//  * Module dependencies.
//  */
//
// var app = require('../server');
// var debug = require('debug')('webpos2:server');
// var http = require('http');
//
// var models = require("../models");
//
// /**
//  * Get port from environment and store in Express.
//  */
//
// var port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);
//
// /**
//  * Create HTTP server.
//  */
//
// var server = http.createServer(app);
//
// /**
//  * Listen on provided port, on all network interfaces.
//  */
//
// // server.listen(port);
// // server.on('error', onError);
// // server.on('listening', onListening);
// // we sync the models with our db
// // (thus creating the apropos tables)
// models.sequelize.sync().then(function () {
//     // set our app to listen to the port we set above
//     var server = app.listen(app.get('port'), function() {
//         // then save a log of the listening to our debugger.
//         debug('Express server listening on port ' + server.address().port);
//     });
// });
//
// /**
//  * Normalize a port into a number, string, or false.
//  */
//
// function normalizePort(val) {
//     var port = parseInt(val, 10);
//
//     if (isNaN(port)) {
//         // named pipe
//         return val;
//     }
//
//     if (port >= 0) {
//         // port number
//         return port;
//     }
//
//     return false;
// }
//
// /**
//  * Event listener for HTTP server "error" event.
//  */
//
// function onError(error) {
//     if (error.syscall !== 'listen') {
//         throw error;
//     }
//
//     var bind = typeof port === 'string'
//         ? 'Pipe ' + port
//         : 'Port ' + port;
//
//     // handle specific listen errors with friendly messages
//     switch (error.code) {
//         case 'EACCES':
//             console.error(bind + ' requires elevated privileges');
//             process.exit(1);
//             break;
//         case 'EADDRINUSE':
//             console.error(bind + ' is already in use');
//             process.exit(1);
//             break;
//         default:
//             throw error;
//     }
// }
//
// /**
//  * Event listener for HTTP server "listening" event.
//  */
//
// function onListening() {
//     var addr = server.address();
//     var bind = typeof addr === 'string'
//         ? 'pipe ' + addr
//         : 'port ' + addr.port;
//     debug('Listening on ' + bind);
// }
